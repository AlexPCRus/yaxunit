//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ПрограммныйИнтерфейс

Функция Элемент(УсловиеСтроки) Экспорт
	
	Контекст = Контекст();
	Контекст.РежимПроверки = РежимыПроверки().Строка;
	Контекст.УсловияСтрок = УсловиеСтроки;
	
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

Функция Колонка(УсловиеКолонки) Экспорт
	
	Контекст = Контекст();
	Контекст.РежимПроверки = РежимыПроверки().Колонка;
	Контекст.УсловиеКолонок = УсловиеКолонки;
	
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

Функция КаждыйЭлемент(УсловиеСтрок = Неопределено) Экспорт
	
	Контекст = Контекст();
	Контекст.РежимПроверки = РежимыПроверки().КаждаяСтрока;
	Контекст.УсловияСтрок = УсловиеСтрок;
	
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

#Область УтвержденияПредикатов

// Проверяет установленное значение Контекста (или его свойство) на равенство ожидаемому.
// 
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
// Для сериализуемых объектов проверяется равенство по значению.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Равно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПараметрыСравнения = Новый Структура("ГлубокийАнализ", Истина);
	ПроверитьВыражение(ЮТПредикаты.Выражения().Равно, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на НЕ равенство ожидаемому.
// 
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// Для сериализуемых значений проверяется равенство по значению
//  
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПараметрыСравнения = Новый Структура("ГлубокийАнализ", Истина);
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеРавно, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть больше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Больше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().Больше, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть больше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция БольшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().БольшеРавно, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Меньше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().Меньше, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеньшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().МеньшеРавно, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "заполненность" (обертка для `ЗначениеЗаполнено`).
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Заполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().Заполнено, , ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "не заполненность" (обертка для `ЗначениеЗаполнено`)
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеЗаполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеЗаполнено, , ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на соответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().ИмеетТип, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на несоответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) НЕ имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеИмеетТип, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
// 
// Проверка поддерживается для следующих типов проверяемого значения:
// 
// - Строка - по вхождению
// - Массив - по наличию равного элемента
// - Структура - по наличию равного значения
// - Соответствие - по наличию равного значения
// - СписокЗначений - по наличию равного значения
// - ФиксированныйМассив - по наличию равного значения
// - ФиксированнаяСтруктура - по наличию равного значения
// - ФиксированноеСоответствие - по наличию равного значения
// 
// При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) содержит указанное значение
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Содержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().Содержит, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
// 
// Проверка поддерживается для следующих типов проверяемого значения: 
// 
//  - Строка - по отсутствию вхождению
//  - Массив - по отсутствию равного элемента
//  - Структура - по отсутствию равного значения
//  - Соответствие - по отсутствию равного значения
//  - СписокЗначений - по отсутствию равного значения
//  - ФиксированныйМассив - по отсутствию равного значения
//  - ФиксированнаяСтруктура - по отсутствию равного значения
//  - ФиксированноеСоответствие - по отсутствию равного значения
//  
//  При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ содержит указанное
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеСодержит, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие подстроки, соответствующей регулярному выражению
//
// Параметры:
//  Шаблон - Строка - Регулярное выражение, по которому ищем подстроку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция СодержитСтрокуПоШаблону(Знач Шаблон, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().СодержитСтрокуПоШаблону, Шаблон, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на отсутствие подстроки, соответствующей регулярному выражению
//
// Параметры:
//  Шаблон - Строка - Регулярное выражение, по которому ищем подстроку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержитСтрокуПоШаблону(Знач Шаблон, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеСодержитСтрокуПоШаблону, Шаблон, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции.
// 
// Проверка поддерживается для следующих типов проверяемого значения: 
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().ИмеетДлину, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции, которые не должны совпадать с указанным значением.
// 
// Проверка поддерживается для следующих типов проверяемого значения: 
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) не имеет указанную дину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеИмеетДлину, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет наличие свойства у объекта/его свойства.
//  В отличии от метода см. Свойство не позиционируется на указанное свойство.
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетСвойство(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().ИмеетСвойство, ИмяСвойства, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

// Проверяет отсутствие свойства у объекта/его свойства.
//  В отличии от метода см. НетСвойства не сбрасывает позиционирование проверки.
//  
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетСвойства(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьВыражение(ЮТПредикаты.Выражения().НеИмеетСвойство, ИмяСвойства, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

#КонецОбласти

// Проверяет значения на соответсвие предикату.
// 
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Соответствует(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикат(Предикат, ОписаниеПроверки);
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция Что(Знач ПроверяемаяКоллекция, Знач Сообщение = "", Знач ПредставлениеКоллекции = Неопределено) Экспорт
	
	Контекст = НовыйКонтекст(ПроверяемаяКоллекция);
	
	Контекст.ОбъектПроверки.Представление = ПредставлениеКоллекции;
	Контекст.ПрефиксОшибки = Сообщение;
	
	ЮТКонтекст.УстановитьЗначениеКонтекста(ИмяКонтекста(), Контекст);
	
	Возврат ЮТУтвержденияКоллекция;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Контекст.
// 
// Возвращаемое значение:
//  см. НовыйКонтекст
Функция Контекст()
	
	//@skip-check constructor-function-return-section
	Возврат ЮТКонтекст.ЗначениеКонтекста(ИмяКонтекста());
	
КонецФункции

// Инициализирует контекст утверждений
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный - Проверяемое значение
// 
// Возвращаемое значение:
//  Структура - контекст утверждений:
// * ОбъектПроверки - см. ЮТФабрика.ОписаниеПроверяемогоЗначения
// * РежимПроверки - Строка
// * УсловияСтрок - Произвольный
// * УсловиеКолонок - Произвольный
Функция НовыйКонтекст(ПроверяемоеЗначение)
	
	Контекст = ЮТФабрика.ОписаниеПроверки(ПроверяемоеЗначение);
	Контекст.ОбъектПроверки.Значение = ПроверяемоеЗначение;
	
	Контекст.Вставить("РежимПроверки", РежимыПроверки().Объект);
	Контекст.Вставить("УсловияСтрок", Неопределено);
	Контекст.Вставить("УсловиеКолонок", Неопределено);
	
	Возврат Контекст;
	
КонецФункции

Функция ИмяКонтекста()
	
	Возврат "ЮТУтвержденияКоллекций";
	
КонецФункции

Функция РежимыПроверки()
	
	Возврат Новый ФиксированнаяСтруктура("Объект, Строка, Колонка, КаждаяСтрока", "Объект", "Строка", "Колонка", "КаждаяСтрока");
	
КонецФункции

#Область Предикаты

Процедура ПроверитьВыражение(Выражение, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения = Неопределено)
	
	Контекст = Контекст();
	Предикат = ЮТФабрика.ВыражениеПредиката(Выражение, Контекст.ОбъектПроверки.ИмяСвойства, ОжидаемоеЗначение);
	ПроверитьПредикат(Предикат, ОписаниеПроверки, ПараметрыСравнения);
	
КонецПроцедуры

Процедура ПроверитьПредикат(Предикат, ОписаниеПроверки, ПараметрыСравнения = Неопределено)
	
	Контекст = Контекст();
	РежимыПроверки = РежимыПроверки();
	
	ПолноеОписаниеПроверки = ЮТОбщий.ДобавитьСтроку(Контекст.ПрефиксОшибки, ОписаниеПроверки, " ");
	ПараметрыСообщенийОбОшибке = ЮТПредикатыКлиентСервер.ПараметрыСообщенийОбОшибке(ПолноеОписаниеПроверки);
	
	Если Контекст.РежимПроверки = РежимыПроверки.Объект Тогда
		
		ПроверитьОбъект(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		
	ИначеЕсли Контекст.РежимПроверки = РежимыПроверки.Строка Тогда
		
		ПроверитьСтроку(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		
	ИначеЕсли Контекст.РежимПроверки = РежимыПроверки.КаждаяСтрока Тогда
		
		ПроверитьСтроки(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		
	ИначеЕсли Контекст.РежимПроверки = РежимыПроверки.Колонка Тогда
		
		ПроверитьКолонку(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбъект(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения)
	
	Результат = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Контекст.ОбъектПроверки.Значение, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
	ОбработатьРезультаПроверки(Результат);
	
КонецПроцедуры

Процедура ПроверитьСтроку(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения)
	
	Строка = СтрокиПоУсловию(Контекст.ОбъектПроверки.Значение, Контекст.УсловияСтрок, Истина);
	Результат = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Строка, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
	ОбработатьРезультаПроверки(Результат);
	
КонецПроцедуры

Процедура ПроверитьСтроки(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения)
	
	Строка = СтрокиПоУсловию(Контекст.ОбъектПроверки.Значение, Контекст.УсловияСтрок, Ложь);
	
	Для Каждого Строка Из Контекст.ОбъектПроверки.Значение Цикл
		
		Результат = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Строка, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		ОбработатьРезультаПроверки(Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКолонку(Контекст, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения)
	
	Для Каждого Строка Из Контекст.ОбъектПроверки.Значение Цикл
		
		Значение = Строка[Контекст.УсловиеКолонок];
		Результат = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Значение, Предикат, ПараметрыСообщенийОбОшибке, ПараметрыСравнения);
		ОбработатьРезультаПроверки(Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиПоУсловию(ОбъектПроверки, Условие, Первая)
	
	Если Условие = Неопределено И НЕ Первая Тогда
		Возврат ОбъектПроверки;
	КонецЕсли;
	
	Если ЮТПредикатыКлиентСервер.ЭтоПредикат(Условие) Тогда
		Возврат ЮТПредикатыКлиентСервер.ОтфильтрованнаяКоллекция(ОбъектПроверки, Условие);
	КонецЕсли;
	
	ТипУсловия = ТипЗнч(Условие);
	
	Если ТипУсловия = Тип("Число") Тогда
		Возврат ?(Первая, ОбъектПроверки[Условие], ЮТОбщий.ЗначениеВМассиве(ОбъектПроверки[Условие]));
	КонецЕсли;
	
#Если Сервер Тогда
	Если ТипУсловия = Тип("Структура") И ТипЗнч(ОбъектПроверки) = Тип("ТаблицаЗначений") Тогда
		Результат = ОбъектПроверки.НайтиСтроки(Условие);
		Если Первая И Результат.Количество() Тогда
			Возврат Результат[0];
		ИначеЕсли Первая Тогда
			Возврат Неопределено;
		Иначе
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
	Если ТипУсловия <> Тип("Структура") Тогда
		ТекстОшибки = СтрШаблон("Неподдерживаемый тип условия поиска строк %1 (`%2`), возможные условия: Индекс, Предикат, Структура отбора",
								Условие,
								ТипЗнч(Условие));
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
	КонецЕсли;
	
	Результат = Новый Массив();
	
	Для Каждого Строка Из ОбъектПроверки Цикл
		
		Успешно = Истина;
		Для Каждого Элемент Из Условие Цикл
			
			Если Строка[Элемент.Ключ] <> Элемент.Значение Тогда
				Успешно = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Успешно И Первая Тогда
			Возврат Строка;
		ИначеЕсли Успешно Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(Первая, Неопределено, Результат);
	
КонецФункции

Процедура ОбработатьРезультаПроверки(Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			 
			Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
				ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(Сообщение.ПроверяемоеЗначение, Сообщение.ОжидаемоеЗначение);
				 
				ТекстИсключения = СтрШаблон("%1 <%2>", ЮТРегистрацияОшибок.ПрефиксОшибкиУтверждений(), Сообщение.Сообщение);
				ВызватьИсключение ТекстИсключения;
			Иначе
				ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(Сообщение);
			КонецЕсли;
			 
		КонецЦикла;
		 
		ВызватьИсключение "Провальный результат проверки не содержит сообщения";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
